services:
  frontend:
    build:
      context: ./services/frontend
      dockerfile: DockerFile
    container_name: frontend
    ports:
      - "3000:80"
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy

  backend:
    build:
      context: ./services/backend
      dockerfile: DockerFile
    container_name: backend
    ports:
      - "5000:3000"
    env_file:
      - .env
    environment:
      DB_HOST: ${DB_HOST}
      DB_USER: ${DB_USER}
      DB_PASS: ${DB_PASS}
      DB_NAME: ${DB_NAME}
      DB_PORT: ${DB_PORT}
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
      BCRYPT_COST: ${BCRYPT_COST}
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/auth/"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: sh -c "npx knex --knexfile src/knexfile.ts migrate:latest && cd dist/src/ && node index.js"
    # command to seed data: npx knex seed:run --knexfile src/knexfile.ts
    
  #add a postgres service
  postgres:
    image: postgres:latest
    container_name: postgres
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 3s
      retries: 5

  visa:
    build:
      context: ./services/mock
      dockerfile: DockerFile
    container_name: visa

  master:
    build:
      context: ./services/mock
      dockerfile: DockerFile
    container_name: master

  mailhog:
    image: mailhog/mailhog
    ports:
      - "8025:8025"
      - "1025:1025"
    restart: unless-stopped
    container_name: mailhog

volumes:
  postgres_data: